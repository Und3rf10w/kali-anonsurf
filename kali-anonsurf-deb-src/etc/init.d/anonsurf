#!/bin/bash

### BEGIN INIT INFO
# Provides:          anonsurf
# Required-Start:
# Required-Stop:
# Should-Start:
# Default-Start:
# Default-Stop:
# Short-Description: Transparent Proxy through TOR.
### END INIT INFO

# AnonSurf is inspired by the homonimous module of PenMode, developed by the "Pirates' Crew" in
# order to make it fully compatible with
# Parrot  OS and other debian-based systems, and it is part of
# parrot-anon package.
#
#
# Devs:
# Lorenzo 'EclipseSpark' Faletra <eclipse@frozenbox.org>
# Lisetta 'Sheireen' Ferrero <sheireen@frozenbox.org>
# Francesco 'mibofra'/'Eli Aran'/'SimpleSmibs' Bonanno <mibofra@ircforce.tk> <mibofra@frozenbox.org>
#
#
# anonsurf is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# You can get a copy of the license at www.gnu.org/licenses
#
# anonsurf is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Parrot Security OS. If not, see <http://www.gnu.org/licenses/>.


export BLUE='\033[1;94m'
export GREEN='\033[1;92m'
export RED='\033[1;91m'
export RESETCOLOR='\033[1;00m'

# Destinations you don't want routed through Tor
TOR_EXCLUDE="192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"

# The UID Tor runs as
# change it if, starting tor, the command 'ps -e | grep tor' returns a different UID
TOR_UID="debian-tor"

# Tor's TransPort
TOR_PORT="9040"

# Is resolvconf installed?
if [[ ! -z `dpkg -l |grep resolvconf` ]]; then 
	resolvconf_support=true;
else
	resolvconf_support=false;
fi


function init {
	echo -e -n " $GREEN*$BLUE killing dangerous applications$RESETCOLOR\n"
	killall -q chrome dropbox iceweasel skype icedove thunderbird firefox chromium xchat transmission deluge pidgin pidgin.orig
	
	echo -e -n " $GREEN*$BLUE cleaning some dangerous cache elements"
	bleachbit -c adobe_reader.cache chromium.cache chromium.current_session chromium.history elinks.history emesene.cache epiphany.cache firefox.url_history flash.cache flash.cookies google_chrome.cache google_chrome.history  links2.history opera.cache opera.search_history opera.url_history &> /dev/null
}


function starti2p {
	echo -e -n " $GREEN*$BLUE starting I2P services$RESETCOLOR\n"
	service tor stop

	# Modify DNS settings
	if [ "$resolvconf_support" = false ] 
	then
		cp /etc/resolv.conf /etc/resolv.conf.bak;
		touch /etc/resolv.conf;
		echo -e 'nameserver 127.0.0.1\nnameserver 209.222.18.222\nnameserver 209.222.18.218' > /etc/resolv.conf;
		echo -e " $GREEN*$BLUE Modified resolv.conf to use localhost and Private Internet Access DNS$RESETCOLOR\n";
	else
		cp /etc/resolvconf/resolv.conf.d/head{,.bak};
		echo -e 'nameserver 127.0.0.1\nnameserver 209.222.18.222\nnameserver 209.222.18.218' >> /etc/resolvconf/resolv.conf.d/head;
		echo -e " $GREEN*$BLUE Modified resolvconf to use localhost and Private Internet Access DNS$RESETCOLOR\n";
		resolvconf -u;
	fi
	sudo -u i2psvc i2prouter start
	sleep 2
	xdg-open 'http://127.0.0.1:7657/home'
}

function stopi2p {
	echo -e -n " $GREEN*$BLUE stopping I2P services\n$RESETCOLOR"
	sudo -u i2psvc i2prouter stop
	
	# restore DNS settings
	if [ "$resolvconf_support" = false ] 
	then
		if [ -e /etc/resolv.conf.bak ]; then
			rm /etc/resolv.conf
			cp /etc/resolv.conf.bak /etc/resolv.conf
		fi
	else
		mv /etc/resolvconf/resolv.conf.d/head{.bak,}
		resolvconf -u
	fi
}

function disable_ipv6() {
    echo -e "\n$GREEN[$BLUE i$GREEN ]$BLUE Stopping IPv6 services:$RESETCOLOR\n"

    # Remove current IPv6 settings if it exists
    if [ -f /etc/sysctl.d/98-kali-anonsurf.conf ]; then
        rm /etc/sysctl.d/98-kali-anonsurf.conf
    fi

    # Add comprehensive IPv6 disable configuration
    cat << EOF >> /etc/sysctl.d/98-kali-anonsurf.conf
# Disable IPv6 - Added by kali-anonsurf
net.ipv6.conf.all.disable_ipv6 = 1 #kali-anonsurf
net.ipv6.conf.default.disable_ipv6 = 1 #kali-anonsurf
net.ipv6.conf.lo.disable_ipv6 = 1 #kali-anonsurf
EOF

    # Apply settings
    if ! sysctl -p /etc/sysctl.d/98-kali-anonsurf.conf > /dev/null; then
        echo -e "$RED Error applying sysctl settings$RESETCOLOR"
        return 1
    fi

    # Verify IPv6 is disabled
    if [ "$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6)" != "1" ]; then
        echo -e "$RED Failed to disable IPv6$RESETCOLOR"
        return 1
    fi

    echo -e "$GREEN IPv6 successfully disabled$RESETCOLOR"
    return 0
}

function enable_ipv6() {
    echo -e "\n$GREEN[$BLUE i$GREEN ]$BLUE Reenabling IPv6 services:$RESETCOLOR\n"

    # Remove the config file if it exists
    if [ -f /etc/sysctl.d/backup/98-kali-anonsurf ]; then
        rm -f /etc/sysctl.d/98-kali-anonsurf.conf
		echo -e "$GREEN Removed anonsurf sysctl config$RESETCOLOR"
    fi

    # Reload all sysctl settings
    if ! sysctl --system > /dev/null; then
        echo -e "$RED Error reloading sysctl settings$RESETCOLOR"
        return 1
    fi

    # Verify IPv6 is enabled
    if [ "$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6)" != "0" ]; then
        echo -e "$RED Failed to forcibly reenable IPv6$RESETCOLOR"
        # return 1
    fi

    # Restart network services
    service network-manager force-reload > /dev/null 2>&1
    service nscd start > /dev/null 2>&1
    service dnsmasq start > /dev/null 2>&1

    echo -e "$GREEN IPv6 successfully enabled$RESETCOLOR"
    return 0
}

function stop_ufw {
	# check, if lock file exists, ufw was enabled before
	if [ -f /var/lock/ufw_enabled_before_anonsurf ]; then
		enabled_before=true
		echo -e "\n $BLUE* UFW-tag found$RESETCOLOR\n"
	fi

	# Stop ufw if enabled
	ufw_is_enabled=$(ufw status | grep -q "Status: active" && echo "true" || echo "false")

	if [ "$ufw_is_enabled" = true ]; then
		systemctl stop ufw
		touch /var/lock/ufw_enabled_before_anonsurf
		echo -e "\n $GREEN*$BLUE UFW disabled$RESETCOLOR\n"
	elif [ -f /var/lock/ufw_enabled_before_anonsurf ]; then
		echo -e "\n $RED* $BLUE UFW-Tag found, but UFW was not enabled. \nBe aware that ufw does only re-enable automatically when you run 'anonsurf stop' or 'ufw enable'. $RESETCOLOR\n"
	else
		echo -e "\n $GREEN*$BLUE UFW was not enabled$RESETCOLOR\n"
	fi
}

function start_ufw {
	# Re-enable ufw if it was enabled before
	if [ -f /var/lock/ufw_enabled_before_anonsurf ]; then
		systemctl restart ufw
		rm /var/lock/ufw_enabled_before_anonsurf
		echo -e "\n $GREEN*$BLUE UFW re-enabled$RESETCOLOR\n"
	else
		echo -e "\n $GREEN*$BLUE UFW was not enabled before; not re-enabling$RESETCOLOR\n"
	fi
	
}

function ip {

	echo -e "\nMy ip is:\n"
	sleep 1
	curl "https://api.ipify.org" # Decent provider serving 30b requests/month, and doesn't block TOR
	echo -e "\n\n----------------------------------------------------------------------"
}

function start {
	# Make sure only root can run this script
	if [ $(id -u) -ne 0 ]; then
		echo -e -e "\n$GREEN[$RED!$GREEN] $RED This script must be run as root$RESETCOLOR\n" >&2
		exit 1
	fi
	
	# Check defaults for Tor
	grep -q -x 'RUN_DAEMON="yes"' /etc/default/tor
	if [ $? -ne 0 ]; then
		echo -e "\n$GREEN[$RED!$GREEN]$RED Please add the following to your /etc/default/tor and restart service:$RESETCOLOR\n" >&2
		echo -e "$BLUE#----------------------------------------------------------------------#$RESETCOLOR"
		echo -e 'RUN_DAEMON="yes"'
		echo -e "$BLUE#----------------------------------------------------------------------#$RESETCOLOR\n"
		exit 1
	fi	
	
	# Disable IPv6 services
	disable_ipv6

	# Disable ufw if enabled
	stop_ufw
	

	echo -e "\n$GREEN[$BLUE i$GREEN ]$BLUE Starting anonymous mode:$RESETCOLOR\n"
	
	if [ ! -e /var/run/tor/tor.pid ]; then
		echo -e " $RED*$BLUE Tor is not running! $GREEN starting it $BLUE for you$RESETCOLOR\n" >&2
		service network-manager force-reload > /dev/null 2>&1
		killall dnsmasq > /dev/null 2>&1
		killall nscd > /dev/null 2>&1	
		service tor start
		sleep 1
	fi
	if ! [ -f /etc/network/iptables.rules ]; then
		iptables-save > /etc/network/iptables.rules
		echo -e " $GREEN*$BLUE Saved iptables rules$RESETCOLOR\n"
	fi
	
	iptables -F
	iptables -t nat -F
	
	if [ "$resolvconf_support" = false ] 
	then
		cp /etc/resolv.conf /etc/resolv.conf.bak
		touch /etc/resolv.conf
		echo -e 'nameserver 127.0.0.1\nnameserver 209.222.18.222\nnameserver 209.222.18.218' > /etc/resolv.conf
		echo -e " $GREEN*$BLUE Modified resolv.conf to use Tor and Private Internet Access DNS"
	else
		cp /etc/resolvconf/resolv.conf.d/head{,.bak}
                echo -e 'nameserver 127.0.0.1\nnameserver 209.222.18.222\nnameserver 209.222.18.218' >> /etc/resolvconf/resolv.conf.d/head
                echo -e " $GREEN*$BLUE Modified resolvconf to use localhost and Private Internet Access DNS$RESETCOLOR\n"
                resolvconf -u
	fi

	# set iptables nat
	iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN
	iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53
	iptables -t nat -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports 53
	iptables -t nat -A OUTPUT -p udp -m owner --uid-owner $TOR_UID -m udp --dport 53 -j REDIRECT --to-ports 53
	
	#resolve .onion domains mapping 10.192.0.0/10 address space
	iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports 9040
	iptables -t nat -A OUTPUT -p udp -d 10.192.0.0/10 -j REDIRECT --to-ports 9040
	
	#exclude local addresses
	for NET in $TOR_EXCLUDE 127.0.0.0/9 127.128.0.0/10; do
		iptables -t nat -A OUTPUT -d $NET -j RETURN
	done
	
	#redirect all other output through TOR
	iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TOR_PORT
	iptables -t nat -A OUTPUT -p udp -j REDIRECT --to-ports $TOR_PORT
	iptables -t nat -A OUTPUT -p icmp -j REDIRECT --to-ports $TOR_PORT
	
	#accept already established connections
	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	#exclude local addresses
	for NET in $TOR_EXCLUDE 127.0.0.0/8; do
		iptables -A OUTPUT -d $NET -j ACCEPT
	done
	
	#allow only tor output
	iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT
	iptables -A OUTPUT -j REJECT

	echo -e "$GREEN *$BLUE All traffic was redirected through Tor$RESETCOLOR\n"
	
	# Check with check.torproject.org
	echo -e "$GREEN[$BLUE i$GREEN ]$BLUE Checking if Tor is working properly$RESETCOLOR\n"

	if [[ -z "$(curl -s https://check.torproject.org/ | grep 'Congratulations. This browser is configured to use Tor.')" ]]; then
		echo -e "$BLUE * Tor is not working properly\n   trying to restart Tor$RESETCOLOR\n"

		if [ -z $restarted ]; then
			restarted=true
			stop
			sleep 1
			start
		else
			echo -e "$RED Tor is not working properly. Please check your settings$RESETCOLOR\n"
			stop
			echo -e "$RED Tor is not working properly. AnonSurf stopped$RESETCOLOR\n"
		fi
		restarted=false

	else
	echo -e "$GREEN[$BLUE i$GREEN ]$BLUE You are under AnonSurf tunnel$RESETCOLOR\n"
	fi
}





function stop {
	# Make sure only root can run our script
	if [ $(id -u) -ne 0 ]; then
		echo -e "\n$GREEN[$RED!$GREEN] $RED This script must be run as root$RESETCOLOR\n" >&2
		exit 1
	fi
	echo -e "\n$GREEN[$BLUE i$GREEN ]$BLUE Stopping anonymous mode:$RESETCOLOR\n"

	iptables -F
	iptables -t nat -F
	echo -e " $GREEN*$BLUE Deleted all iptables rules\n$RESETCOLOR"
	
	if [ -f /etc/network/iptables.rules ]; then
		iptables-restore < /etc/network/iptables.rules
		rm /etc/network/iptables.rules
		echo -e " $GREEN*$BLUE Iptables rules restored"
	fi
	
	# restore DNS settings
	if [ "$resolvconf_support" = false ] 
	then
		if [ -e /etc/resolv.conf.bak ]; then
			rm /etc/resolv.conf
			cp /etc/resolv.conf.bak /etc/resolv.conf
		fi
	else
		mv /etc/resolvconf/resolv.conf.d/head{.bak,}
		resolvconf -u
	fi
	
	service tor stop
	
	echo -e "\n$GREEN[$BLUE i$GREEN ]$BLUE Reenabling IPv6 services:$RESETCOLOR\n"

	# reenable IPv6 services
	enable_ipv6

	# Re-enable ufw if it was enabled before
	start_ufw
	
	echo -e " $GREEN*$BLUE Anonymous mode stopped$RESETCOLOR\n"
}

function change {
	service tor reload
	sleep 2
	echo -e " $GREEN*$BLUE Tor daemon reloaded and forced to change nodes$RESETCOLOR\n"
}

function status {
	service tor status
}

case "$1" in
	start)
		init
		start
	;;
	stop)
		init
		stop
	;;
	change)
		change
	;;
	status)
		status
	;;
	myip|ip)
		ip
	;;
	starti2p)
		starti2p
	;;
	stopi2p)
		stopi2p
	;;
	restart)
		$0 stop
		sleep 1
		$0 start
	;;
   *)
echo -e "
Parrot AnonSurf Module
	Usage:
	$RED┌──[$GREEN$USER$YELLOW@$BLUE`hostname`$RED]─[$GREEN$PWD$RED]
	$RED└──╼ \$$GREEN"" anonsurf $RED{$GREEN""start$RED|$GREEN""stop$RED|$GREEN""restart$RED|$GREEN""change$RED""$RED|$GREEN""status$RED""}
	
	$RED start$BLUE -$GREEN Start system-wide anonymous
		  tunneling under TOR proxy through iptables	  
	$RED stop$BLUE -$GREEN Reset original iptables settings
		  and return to clear navigation
	$RED restart$BLUE -$GREEN Combines \"stop\" and \"start\" options
	$RED change$BLUE -$GREEN Changes identity restarting TOR
	$RED status$BLUE -$GREEN Check if AnonSurf is working properly
	$RED myip$BLUE -$GREEN Show your current IP address $RED(RISKY)$RESETCOLOR
	----[ I2P related features ]----
	$RED starti2p$BLUE -$GREEN Start i2p services
	$RED stopi2p$BLUE -$GREEN Stop i2p services
	
$RESETCOLOR" >&2
exit 1
;;
esac

echo -e $RESETCOLOR
exit 0
